/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.classpracticesweek8;

/**
 *
 * @author Sound Room
 */
public class ClassPractice1 extends javax.swing.JFrame {

    /**
     * Creates new form ClassPractice1
     */
    public ClassPractice1() {
        initComponents();

        //adding the radio buttons to the button group
        buttonGroup1.add(RadioButtonBalcony);
        buttonGroup1.add(RadioButtonMezzanine);
        buttonGroup1.add(RadioButtonOrchestra);

        //making the error anouncement invisible
        LabelError.setVisible(false);

        //disable the text fields that show results
        TextFieldPriceResult.setEditable(false);
        TextFieldTotalResult.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        LabelTicketNum = new javax.swing.JLabel();
        TextFieldTicketNum = new javax.swing.JTextField();
        LabelPriceEach = new javax.swing.JLabel();
        LabelTotal = new javax.swing.JLabel();
        RadioButtonOrchestra = new javax.swing.JRadioButton();
        RadioButtonMezzanine = new javax.swing.JRadioButton();
        RadioButtonBalcony = new javax.swing.JRadioButton();
        ButtonCalculatePrice = new javax.swing.JButton();
        LabelError = new javax.swing.JLabel();
        TextFieldPriceResult = new javax.swing.JTextField();
        TextFieldTotalResult = new javax.swing.JTextField();
        checkboxMatinee = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LabelTicketNum.setText("Num Tickets");

        LabelPriceEach.setText("Price Each");

        LabelTotal.setText("Total");

        RadioButtonOrchestra.setText("Orchestra");
        RadioButtonOrchestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonOrchestraActionPerformed(evt);
            }
        });

        RadioButtonMezzanine.setText("Mezzanine");
        RadioButtonMezzanine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonMezzanineActionPerformed(evt);
            }
        });

        RadioButtonBalcony.setText("Balcony");
        RadioButtonBalcony.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonBalconyActionPerformed(evt);
            }
        });

        ButtonCalculatePrice.setText("Calc Price");
        ButtonCalculatePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCalculatePriceActionPerformed(evt);
            }
        });

        LabelError.setText("Error!!");

        TextFieldPriceResult.setText(" ");

        TextFieldTotalResult.setText(" ");

        checkboxMatinee.setText("Matinee");
        checkboxMatinee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxMatineeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LabelError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LabelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(TextFieldTotalResult, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RadioButtonMezzanine, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RadioButtonOrchestra, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RadioButtonBalcony, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(ButtonCalculatePrice)
                                        .addGap(54, 54, 54)
                                        .addComponent(LabelPriceEach))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(LabelTicketNum, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TextFieldTicketNum, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkboxMatinee)
                                    .addComponent(TextFieldPriceResult, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(54, 54, 54))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTicketNum)
                    .addComponent(TextFieldTicketNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkboxMatinee))
                .addGap(18, 18, 18)
                .addComponent(RadioButtonOrchestra)
                .addGap(18, 18, 18)
                .addComponent(RadioButtonMezzanine)
                .addGap(18, 18, 18)
                .addComponent(RadioButtonBalcony)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelPriceEach)
                    .addComponent(ButtonCalculatePrice)
                    .addComponent(TextFieldPriceResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelTotal)
                    .addComponent(LabelError)
                    .addComponent(TextFieldTotalResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonCalculatePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCalculatePriceActionPerformed

        //try and except to catch if the text field is empty when they hit the button
        try {

            //defining integers for the price of a ticket and for the number of tickets
            int ticketPrice = 0;
            int totalPrice = 0;
            int numTickets = Integer.parseInt(TextFieldTicketNum.getText());

            //making this thing so we can keep track of whether or not a radio button is selected
            boolean typeSelected = true;

            LabelError.setVisible(false);

            //for each of the three options, if it's selected we set the price each as the cost and the 
            //total as the cost per * numTickets
            if (RadioButtonOrchestra.isSelected()) {

                ticketPrice = 85;
                totalPrice = numTickets * ticketPrice;

            } else if (RadioButtonMezzanine.isSelected()) {

                ticketPrice = 70;
                totalPrice = numTickets * ticketPrice;

            } else if (RadioButtonBalcony.isSelected()) {

                ticketPrice = 45;
                totalPrice = numTickets * ticketPrice;

            } else {

                //if they didn't pick a ticket option show the error message and clear the each and total places
                LabelError.setVisible(true);
                TextFieldTotalResult.setText(" ");
                TextFieldPriceResult.setText(" ");

                typeSelected = false;

            }

            //if and only if there's a button selected:
            if (typeSelected) {

                //Sets the price and total labels:
                //setting the price label to the price per ticket
                TextFieldPriceResult.setText("$" + ticketPrice);

                //if the matinee is selected multiply the total cost by 85% bc of the 15% discount
                if (checkboxMatinee.isSelected()) {

                    totalPrice = (int) (totalPrice * 0.85);

                }

                //then we set the total equal to it
                TextFieldTotalResult.setText("$" + Integer.toString(totalPrice));

            }

        } catch (NumberFormatException e) {

            //show the error message and clear the each and total places
            LabelError.setVisible(true);
            TextFieldTotalResult.setText(" ");
            TextFieldPriceResult.setText(" ");

        }


    }//GEN-LAST:event_ButtonCalculatePriceActionPerformed

    private void RadioButtonOrchestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonOrchestraActionPerformed
        //try and except to catch if the text field is empty when they hit the button
        try {

            //defining integers for the price of a ticket and for the number of tickets
            int ticketPrice = 85;
            int numTickets = Integer.parseInt(TextFieldTicketNum.getText());
            int totalPrice = ticketPrice * numTickets;

            LabelError.setVisible(false);

            //Sets the price and total labels:
            //setting the price label to the price per ticket
            TextFieldPriceResult.setText("$" + ticketPrice);

            //if the matinee is selected multiply the total cost by 85% bc of the 15% discount
            if (checkboxMatinee.isSelected()) {

                totalPrice = (int) (totalPrice * 0.85);

            }

            //then we set the total equal to it
            TextFieldTotalResult.setText("$" + Integer.toString(totalPrice));

        } catch (NumberFormatException e) {

            //show the error message and clear the each and total places
            LabelError.setVisible(true);
            TextFieldTotalResult.setText(" ");
            TextFieldPriceResult.setText(" ");

        }

    }//GEN-LAST:event_RadioButtonOrchestraActionPerformed

    private void RadioButtonMezzanineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonMezzanineActionPerformed

        //try and except to catch if the text field is empty when they hit the button
        try {

            //defining integers for the price of a ticket and for the number of tickets
            int ticketPrice = 70;
            int numTickets = Integer.parseInt(TextFieldTicketNum.getText());
            int totalPrice = ticketPrice * numTickets;

            LabelError.setVisible(false);

            //Sets the price and total labels:
            //setting the price label to the price per ticket
            TextFieldPriceResult.setText("$" + ticketPrice);

            //if the matinee is selected multiply the total cost by 85% bc of the 15% discount
            if (checkboxMatinee.isSelected()) {

                totalPrice = (int) (totalPrice * 0.85);

            }

            //then we set the total equal to it
            TextFieldTotalResult.setText("$" + Integer.toString(totalPrice));

        } catch (NumberFormatException e) {

            //show the error message and clear the each and total places
            LabelError.setVisible(true);
            TextFieldTotalResult.setText(" ");
            TextFieldPriceResult.setText(" ");

        }


    }//GEN-LAST:event_RadioButtonMezzanineActionPerformed

    private void RadioButtonBalconyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonBalconyActionPerformed

        //try and except to catch if the text field is empty when they hit the button
        try {

            //defining integers for the price of a ticket and for the number of tickets
            int ticketPrice = 40;
            int numTickets = Integer.parseInt(TextFieldTicketNum.getText());
            int totalPrice = ticketPrice * numTickets;

            LabelError.setVisible(false);

            //Sets the price and total labels:
            //setting the price label to the price per ticket
            TextFieldPriceResult.setText("$" + ticketPrice);

            //if the matinee is selected multiply the total cost by 85% bc of the 15% discount
            if (checkboxMatinee.isSelected()) {

                totalPrice = (int) (totalPrice * 0.85);

            }

            //then we set the total equal to it
            TextFieldTotalResult.setText("$" + Integer.toString(totalPrice));

        } catch (NumberFormatException e) {

            //show the error message and clear the each and total places
            LabelError.setVisible(true);
            TextFieldTotalResult.setText(" ");
            TextFieldPriceResult.setText(" ");

        }


    }//GEN-LAST:event_RadioButtonBalconyActionPerformed

    private void checkboxMatineeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxMatineeActionPerformed
       
        try {

            //defining integers for the price of a ticket and for the number of tickets
            int ticketPrice = 0;
            int numTickets = Integer.parseInt(TextFieldTicketNum.getText());
            int totalPrice = ticketPrice * numTickets;

            LabelError.setVisible(false);

            if (RadioButtonOrchestra.isSelected()) {

                ticketPrice = 85;
                totalPrice = numTickets * ticketPrice;

            } else if (RadioButtonMezzanine.isSelected()) {

                ticketPrice = 70;
                totalPrice = numTickets * ticketPrice;

            } else if (RadioButtonBalcony.isSelected()) {

                ticketPrice = 45;
                totalPrice = numTickets * ticketPrice;

            } else {

                //if they didn't pick a ticket option show the error message and clear the each and total places
                LabelError.setVisible(true);
                TextFieldTotalResult.setText(" ");
                TextFieldPriceResult.setText(" ");

            }

            //Sets the price and total labels:
            //setting the price label to the price per ticket
            TextFieldPriceResult.setText("$" + ticketPrice);

            //if the matinee is selected multiply the total cost by 85% bc of the 15% discount
            if (checkboxMatinee.isSelected()) {

                totalPrice = (int) (totalPrice * 0.85);

            }

            //then we set the total equal to it
            TextFieldTotalResult.setText("$" + Integer.toString(totalPrice));
        } catch (Exception e) {

            //show the error message and clear the each and total places
            LabelError.setVisible(true);
            TextFieldTotalResult.setText(" ");
            TextFieldPriceResult.setText(" ");

        }

    }//GEN-LAST:event_checkboxMatineeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassPractice1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassPractice1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassPractice1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassPractice1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassPractice1().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCalculatePrice;
    private javax.swing.JLabel LabelError;
    private javax.swing.JLabel LabelPriceEach;
    private javax.swing.JLabel LabelTicketNum;
    private javax.swing.JLabel LabelTotal;
    private javax.swing.JRadioButton RadioButtonBalcony;
    private javax.swing.JRadioButton RadioButtonMezzanine;
    private javax.swing.JRadioButton RadioButtonOrchestra;
    private javax.swing.JTextField TextFieldPriceResult;
    private javax.swing.JTextField TextFieldTicketNum;
    private javax.swing.JTextField TextFieldTotalResult;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkboxMatinee;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
